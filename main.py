import logging
import asyncio
import os

from aiogram import Bot, Dispatcher
from aiogram.types import Message

from google.auth.transport.requests import AuthorizedSession
from google.oauth2 import service_account

CHANNEL_ID = os.getenv('CHANNEL_ID')

bot = Bot(token=os.getenv('TOKEN'))
dp = Dispatcher()

async def delete_pinned_message():
    try:
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ (–≤–∫–ª—é—á–∞—è –ø–æ—Å–ª–µ–¥–Ω–µ–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ)
        chat = await bot.get_chat(CHANNEL_ID)
        
        await bot.unpin_all_chat_messages(CHANNEL_ID)
        logging.info("‚úÖ –í—Å–µ –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã.")
        
        if chat.pinned_message:
            pinned_message_id = chat.pinned_message.message_id

            # –£–¥–∞–ª—è–µ–º —Å–∞–º–æ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.delete_message(CHANNEL_ID, pinned_message_id)
            logging.info(f"üóë –°–æ–æ–±—â–µ–Ω–∏–µ {pinned_message_id} —É–¥–∞–ª–µ–Ω–æ –∏–∑ –∫–∞–Ω–∞–ª–∞.")
                                    
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
        
# –•—Ä–∞–Ω–∏–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
last_message_id = None

def get_value():    

    # –ü—É—Ç—å –∫ JSON-—Ñ–∞–π–ª—É Service Account
    SERVICE_ACCOUNT_FILE = "service_account.json"

    SHEET_ID = "1WyCLramjiN1sm7oq1rTVXrUBVPnpHQJgKnGRzrOPG-U"
    SHEET_NAME = "resuming"
    RANGE = "D3:D8"

    # URL API –¥–ª—è —á—Ç–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets
    URL = f"https://sheets.googleapis.com/v4/spreadsheets/{SHEET_ID}/values/{SHEET_NAME}!{RANGE}"

    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è —á–µ—Ä–µ–∑ Service Account
    credentials = service_account.Credentials.from_service_account_file(
        SERVICE_ACCOUNT_FILE,
        scopes=["https://www.googleapis.com/auth/spreadsheets.readonly"]
    )

    # –°–æ–∑–¥–∞–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    authed_session = AuthorizedSession(credentials)
    response = authed_session.get(URL)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ø–µ—à–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞
    if response.status_code == 200:
        data = response.json()
        if "values" in data:
            all_winrate = data["values"][5][0]
            football_winrate = data["values"][2][0]
            hockey_winrate = data["values"][3][0]
            basketball_winrate = data["values"][0][0]
            tennis_winrate = data["values"][1][0]
            express_winrate = data["values"][4][0]
            return all_winrate, football_winrate, hockey_winrate, basketball_winrate, tennis_winrate, express_winrate
        else:
            print("–Ø—á–µ–π–∫–∞ –ø—É—Å—Ç–∞ –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç.")
            return None
    else:
        print(f"–û—à–∏–±–∫–∞: {response.status_code}, {response.text}")
        return None

async def post_to_channel():
    global last_message_id
                        
    all_winrate, football_winrate, hockey_winrate, basketball_winrate, tennis_winrate, express_winrate = get_value()
    
    if all_winrate or football_winrate or hockey_winrate or basketball_winrate or tennis_winrate or express_winrate:
        text = f"""
WINRATE üìà

–æ–±—â–∏–π - {all_winrate}

üîΩüîΩüîΩ

‚öΩÔ∏è —Ñ—É—Ç–±–æ–ª - {football_winrate}

üèí —Ö–æ–∫–∫–µ–π - {hockey_winrate}

üèÄ –±–∞—Å–∫–µ—Ç–±–æ–ª - {basketball_winrate}

üéæ —Ç–µ–Ω–Ω–∏—Å - {tennis_winrate}

üé≤ —ç–∫—Å–ø—Ä–µ—Å—Å - {express_winrate}
        """

        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–∞–Ω–∞–ª
            msg = await bot.send_message(CHANNEL_ID, text)
    
            # –ó–∞–∫—Ä–µ–ø–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await bot.pin_chat_message(CHANNEL_ID, msg.message_id)
            
            # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –æ–Ω–æ –±—ã–ª–æ
            if last_message_id:
                try:
                    await bot.delete_message(CHANNEL_ID, last_message_id)
                except Exception as e:
                    logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

            # –û–±–Ω–æ–≤–ª—è–µ–º ID –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            last_message_id = msg.message_id
            logging.info(f"–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {text}")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

@dp.channel_post()
async def delete_pin_notifications(message: Message):
    global last_pinned_by_bot
    if message.pinned_message:
        try:            
            if 'WINRATE' in message.pinned_message.text:
                await bot.delete_message(CHANNEL_ID, message.message_id)
                logging.info(f"üóë –£–¥–∞–ª–µ–Ω–æ —Å–∏—Å—Ç–µ–º–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∑–∞–∫—Ä–µ–ø–µ: {message.message_id}")
        except Exception as e:
            logging.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {e}")
            
async def scheduler():
    while True:
        await post_to_channel()
        await asyncio.sleep(int(os.getenv('INTERVAL')))

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await delete_pinned_message()
    logging.basicConfig(level=logging.INFO)
    asyncio.create_task(scheduler())  # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—é
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
